1. Scenario: Hiking

Objects: 

	a.	ReachNowService:
						DATA: NoOfPassengers, FareCalculated, TaxiType
						BEHAVIORs: findTaxi, reserveTaxi, cancelTaxi, payAmount, 
	b.	Vehicle: 
						DATA: VehicleNumber, Destination, Driver,Location,MaxGasCapacity, GasIndicator
						BEHAVIORs: drive, park
	c.	GasStation:
						DATA: Location, Amount, TypeOfGas
						BEHAVIOR: calculateTotal
	d.	Restaurant
       					DATA: Location, CostOfFood
       					BEHAVIOR: OrderFood
	e.	CreditCard:
						DATA: CardNumber, Name, ExpiryDate, Amount, CVVCode, TransactionID
						BEHAVIOR: isValid, payAmount
	f.	Hotel:
						DATA: Location,NoOfNights
						BEHAVIOR: calculateAmount, calculateNights
	g.	Friends: 
						DATA: FriendName[] friendnames, NoOfPersons
						BEHAVIOR: hasValidLicense, orderFoodFromMenu
	h. 	GPS:
						DATA: CurrentLocation,Distance, HomeLocation
						BEHAVIOR: findNearestRestaurant,findNearestGasStation, findDistance, findHotel
	i. TicketCounter:
						DATA: AmountPerPerson
						BEHAVIOR: buyTickets

    Instances:

    ReachNowService reachNow;		
    Vehicle vehicle;
    CreditCard  creditCard;
    Restaurant restaurant;
    GPS gps;
    Hotel hotel;
    GasStation gasStation;
    TicketCounter ticketCounter;
    Friends friends;
    	
    Sequence:
    
    START: 
    reachNow.findTaxi -> TaxiType, NoOfPassengers: desiredtaxi
    vehicle = desiredtaxi
    IF vehicle is not empty 
    	gps.findDistance -> Destination,gps.CurrentLocation : distance
    	gps.Distance = distance
    	reachNow.reserveTaxi -> vehicle, gps.Distance: FareCalculated	
    	creditCard.payAmount -> CardNumber, Name, ExpiryDate, Amount, CVVCode: TransactionID
    	IF TransactionID is empty
    		CardInvalid message
    	ENDIF
    ELSE
    	TryAgainLater Message
    	GOTO START
    ENDIF
    FOR i in each name in friends.friendnames[]
    	If friends.friendnames[i].hasValidLicense 
    		vehicle.Driver = friends.friendnames[i]
    		Break
    		i++
    END
    vehicle.drive -> Destination, Driver 
    gps.findNearestRestaurant -> vehicle.location : DesiredRestaurant
    restaurant = DesiredRestaurant
    LOOP
    	IF vehicle.Location is equal to restaurant.Location/*EATING IN A RESTAURANT*/
    		vehicle.park 
    		FOR i in each name in friends.friendnames[i]
    		restaurant.orderFood -> friends.friendsnames[i].orderFoodFromMenu : restaurant.CostOfFood
    		TotalBill = TotalBill + CostOfFood
    		END LOOP
    		creditCard.payAmount -> CardNumber, Name, ExpiryDate, TotalBill, CVVCode: TransactionID
    		IF TransactionID is empty
    			CardInvalid message
    		ELSE
    			vehicle.drive -> Destination, Driver 
    			continue;
    		ENDIF
    	ENDIF
    	IF vehicle.GasIndicator is less than quarter of vehicle.MaxGasCapacity/*GAS FILLING*/
    		gps.findNearestGasStation -> vehicle.Location:DesiredStation
    		gasStation = DesiredStation
    		vehicle.drive -> gasStation.location, Driver
    		vehicle.park
    		//Fill Gas
    		gasStation.calculateTotal -> gasStation.TypeOfGas,Gallons : Amount
    		creditCard.payAmount -> CardNumber, Name, ExpiryDate, Amount, CVVCode: TransactionID
    			IF TransactionID is empty
    				CardInvalid message
    			ELSE
    				vehicle.drive -> Destination, Driver 
    				continue;
    			ENDIF
    	ENDIF
    	IF vehicle.Location is equal to Destination/*BUY TICKETS INTO PARK*/
    		vehicle.park
    		ticketCounter.buyTickets -> friends.NoOfPersons, ticketCounter.AmountPerPerson : totalamount
    		creditCard.payAmount -> CardNumber, Name, ExpiryDate, totalamount, CVVCode: TransactionID
    			IF TransactionID is empty
    				CardInvalid message
    			ELSE
    				//hike up the place and down
    				gps.findHotel -> vehicle.Location: DesiredHotel
    				hotel = DesiredHotel
    				vehicle.drive -> hotel.Location, Driver
    				continue;
    			ENDIF
    	ENDIF
    	If vehicle.Location is hotel.Location/*HOTEL CHECK IN*/
    		vehicle.park
    		//STAY AT HOTEL AND CHECKOUT
    		hotel.calculateNights -> EntryDate, CheckOutDate : NoOfNights
    		hotel.NoOfNights = NoOfNights
    		hotel.calculateAmount -> hotel.NoOfNights, hotel.AmountPerNight : totalAmount
    		creditCard.payAmount -> CardNumber, Name, ExpiryDate, totalAmount, CVVCode: TransactionID
    			IF TransactionID is empty
    				CardInvalid message
    			ELSE
				vehicle.drive -> gps.HomeLocation, Driver 
				continue;
			ENDIF
			ENDIF
	ENDLOOP
	END



2.Scenario: Organizing Career Fair 

Objects:

    a. Companies: 
                    DATA: Companies[] Companies, StallId
    b. Participants:
                    DATA: ParticipantName, Age, Qualifications, Experience, ParticipantID
                    BEHAVIOR: register, visit, isHungry, eatFood
    c. Furnitures:
                    DATA: NoOfChairs, Location

    d. Food:        
                    DATA: FoodItems[] FoodItems, Location, Restaurant

    e. Volunteers:
                    DATA: Count
                    BEHAVIOR: help

    f. InvitationLetter:

                    DATA: RSVP
    g. Payment:
                    DATA: CreditCardNumber, Name, ExpiryDate, CVVCode, Amount, AccountBalance
                    BEHAVIOR: payAmount, addAccountBalance
    h. Advertisements:
                    DATA: AdType
                    BEHAVIOUR: advertise
    i. Sponsors:
                    DATA: Sponsors[] sponsors, RSVP, Amount
    j. Venue:
                    DATA: Location, Date
                    BEHAVIOR: obtainPermit,
    k. Organizer: 
                    BEHAVIOR: findVenue, calculateAmount, inviteCompanies, obtainSponsors, rentFurni, findFurni, orderFood, findFood, findVolunteers,findType, assignStallID, 

    Instances:

    Companies companies
    JobSeekers jobseekers
    Furnitures furnitures
    Food food
    Volunteers volunteers
    InvitationLetter invitationLetter
    Payment payment
    Advertisements advertisements
    Sponsors sponsors
    Venue venue
    Organizer organizer

    Sequence:

    START
        organizer.findVenue -> Capacity,Budget -> DesiredVenue
        IF DesiredVenue is NULL
            GOTO START
        ELSE
        venue.obtainPermit -> DesiredVenue : isPermitAvailable
        IF isPermitAvailable is NOT true
            GOTO START
        ELSE
            venue.Location = DesiredVenue
            venue.Capacity = Capacity
            organizer.calculateAmount -> venue.Location, venue.Date, Hours: TotalAmount
            payment.payAmount -> CreditCardNumber, Name, ExpiryDate, CVVCode, TotalAmount: TransactionID
            IF TransactionID is NULL
                Try Again
            Break
            //Venue Booked
        ENDIF

    //Invite Companies

    FOR company in each companies[]
        organizer.inviteCompanies -> company, DateOfFair:RSVP
        invitationletter.RSVP = RSVP
        IF invitationletter.RSVP is YES
            organizer.assignStallID -> company: StallId
            companies.StallId = StallId
        ELSE
            //COMPANY NOT COMING 
        ENDIF
    END FOR
    
    //Obtain Sponsors
    
    FOR sponsor in each Sponsors[]
        organizer.obtainSponsors -> sponsor, Email : Amount
        sponsor.Amount = Amount
            IF sponsor.Amount is not Empty
                payment.Addaccountbalance -> sponsor.Amount, payment.AccountBalance: payment.AccountBalance
            ELSE
                //NO SPONSORSHIP!
            ENDIF
    END FOR

    //Arrange For Chairs

    LOOP
    organizer.findFurni -> participants.count, venue.Location -> DesiredShop
    IF DesiredShop is NULL 
        continue
    ELSE
        furnitures.Location = DesiredShop
        organizer.rentFurni -> NoOfChairs, Hours, furnitures.Location, venue.Location:RentAmount
        furni.RentAmount = RentAmount
        payment.payAmount -> CreditCardNumber, Name, ExpiryDate, CVVCode, furni.RentAmount: TransactionID
        IF TransactionID is NULL
            Try Again
        Break
    END LOOP
    ENDIF
    END


    //Register Participants 

    LOOP
    WHILE participants.Count is lesser venue.Capacity
    DO 
        participants.register -> ParticipantName, Age, Qualifications, Experience : ParticipantID
        participants.ParticipantID = ParticipantID
        participants.Count = participants.Count + 1;
    END WHILE

    //Order Food
    LOOP
    organizer.findFood -> participants.count, venue.Location -> DesiredRestaurant
    fooditems.Restaurant = DesiredRestaurant
    IF DesiredRestaurant is NULL
        //TRY AGAIN!
    ELSE
        foodItems.orderFood -> venue.Location, fooditems.Restaurant, FoodItems -> TotalAmount
        payment.payAmount -> CreditCardNumber, Name, ExpiryDate, CVVCode, TotalAmount, : TransactionID
        IF TransactionID is NULL
            Try Again
        Break
    END LOOP

    //Find Volunteers

    LOOP
    IF volunteers.Count is lesser than venue.Capacity/10
        organizer.findVolunteers -> venue.Location, Hours -> VolunteerID
        volunteers.Count = volunteers.Count+1
    ELSE
        //NO MORE REQUIRED!
    END IF
    END LOOP

    //Advertisements

    LOOP
    Organizer.findType -> message, NoOfPeople, Budget : AdType
    IF AdType is NOT NULL

    ELSE
        advertisement.AdType = AdType
        advertisement.advertise -> Date, advertisement.AdType, message -> TotalAmount
        payment.payAmount -> CreditCardNumber, Name, ExpiryDate, CVVCode, TotalAmount, : TransactionID
        IF TransactionID is NULL
            Try Again
        Break
    END LOOP

    //Visit the fair
    participants.visit -> participants.ParticipantID, companies.StallId : CompanyCorrespondence
    participants.eatFood -> FoodItems
    volunteers.help -> participantID, companies.StallId


3. Scenario: Ordering a Pizza

Objects:

    a. Pizza
                DATA: TypeOfPizzaBases, PizzaBase, CompletePizza
                METHODS: addExtraCheese
    b. Toppings
                DATA: Toppings
    d. Sides
                DATA: TypeOfSides, TypesOfGB, TypesOfSoda
                BEHAVIOR: chooseGB,chooseSoda
    e. GarlicBreads:
                DATA: CheeseGarlicBreadPrice,GarlicBreadPrice 
    f. Sodas:
                DATA: PepsiPrice, ColaPrice
    g. Customer: 
                 DATA: Name, ApartmentNo, Street, City, State, PinCode
                 BEHAVIOR: browsePizzaBase, choosePizzaBase, browseToppings, addToppings, addExtraCheese, orderPizza, browseSides,
                    chooseSide, addDeliveryDetails, payAmount
    i. Payment:
                 DATA: CheeseGBCost ,GBCost ,PepsiPrice ,ColaPrice, ExtraCost, CurrentBill
    k. PizzaHut:
                 DATA: OrderNumber,ReadyPizza, DeliveryBoy, CompleteOrder, HasDelivered
                 BEHAVIOR: makePizza, receiveOrder, sendPizza


Instances:
    
    Pizza pizza
    Toppings toppings
    Sides sides
    GarlicBreads garlicbreads
    Sodas sodas
    Customer customer
    Payment payment
    PizzaHut pizzahut
    
    Sequence:
    
    customer.browsePizzaBase -> :TypeOfPizzaBases
    pizza.TypeOfPizzaBases = TypeOfPizzaBases
    
    customer.choosePizzaBase -> pizza.TypeOfPizzaBases : DesiredPizzaBase
    pizza.PizzaBase = DesiredPizzaBase
    
    customer.browseToppings ->  :TypeOfToppings
    toppings.Toppings = TypeOfToppings
    
    customer.addToppings -> toppings.Toppings, Number, pizza.PizzaBase : CompletePizza
    pizza.CompletePizza = CompletePizza
    
    IF customer.addExtraCheese is EQUAL TO YES 
        pizza.addExtraCheese -> pizza.CompletePizza:ExtraCost
        payment.ExtraCost = ExtraCost
    ELSE
        payment.ExtraCost = 0
    
    LOOP
    customer.browseSides -> :TypesOfSides
    sides.TypeOfSides = TypeOfSides
    
    IF sides.TypeOfSides is NOT NULL
        customer.chooseSide -> sides.TypeOfSides -> ChosenSide
        CASE OF ChosenSide
        CASE "GARLIC BREADS":
            sides.chooseGB -> sides.TypeOfGB:ChosenSpecific
            CASE OF ChosenSpecific
            CASE "CHEESE GARLIC BREAD": 
                     customer.addSides -> ChosenSpecific, garlicbread.CheeseGarlicBreadPrice, Quantity : CheeseGBCost
                     payment.CheeseGBCost = CheeseGBCost
                     break
            CASE "PLAIN GARLIC BREAD": 
                     customer.addSides -> ChosenSpecific, garlicbread.GarlicBreadPrice, Quantity : GBCost
                     payment.CheeseGBCost = CheeseGBCost
                     break
        CASE "SODAS":
            sides.chooseSoda -> sides.TypeOfSoda:ChosenSpecific
            CASE OF ChosenSpecific
            CASE "PEPSI":  
                    customer.addSides -> ChosenSpecific, soda.PepsiPrice, Quantity : PepsiPrice
                    payment.PepsiPrice = PepsiPrice
                    break
            CASE "COLA"
                    customer.addSides -> ChosenSpecific, soda.ColaPrice, Quantity : ColaPrice
                    payment.PepsiPrice = PepsiPrice
                    break
        CASE DEFAULT:
            No Such Side exists!
    ELSE
        No Sides Available now message
    END IF
        ENDLOOP
    
    customer.addDeliveryDetails -> Name, ApartmentNo, Street, City, State, PinCode : CustomerID
    
    //Complete Order
    customer.orderPizza = pizza.CompletePizza, payment.CheeseGBCost, payment.GBCost, payment.PepsiPrice, payment.ColaPrice, NoOfPeople, size,     payment.ExtraCost: TotalBill    
    payment.TotalBill = TotalBil    l    
    
    //Payment
    customer.payAmount -> CreditCardNumber, Name, ExpiryDate, CVVCode, payment.TotalBill : TransactionID
    IF TransactionID is NULL
        Try Again
    ELSE
        pizzahut.transactionID = TransactionID
        pizzahut.receiveOrder -> pizza.CompletePizza, payment.CheeseGBCost, payment.GBCost, payment.PepsiPrice, payment.ColaPrice, NoOfPeople, size,     payment.ExtraCost : OrderNumber    
    
        IF OrderNumber is NOT NULL
            pizzahut.OrderNumber = OrderNumber
            pizzahut.makePizza -> pizzahut.OrderNumber, EstimatedTimeToPrepare : pizzahut. CompleteOrder
    
            pizzahut.sendPizza -> customer.name, customer.ApartmentNo, customer.Street, customer.City, customer.State, customer.PinCode, pizzahut.     DeliveryBoy, EstimatedTimeToArrive : HasDelivered    
            pizzahut.HasDelivered = HasDelivered    
        ELSE    
                No Orders Taken!    
        ENDIF    
    ENDIF    
    
4.Scenario: CodeSharing Platform

Objects:

    a. Owner: 
                DATA: UserName, Password, Repositories, Followers, Following, Stars, Contributions

    b. GitHub: 
                BEHAVIOUR: obtainLoginDetails, sendUserOptions, obtainChoice, createNewRepo, sendToDataBase, importRepo, newGist, displayStats, obtainProfileAction, displayRepos, obtainActionRepos, displayActionRepository, obtainActionOnFiles, findFile, displayFile, uploadedFileToDataBase, createPullRequest, createBranch, followers, following, stars, contributions
    c. Repositories:
                DATA: NewRepo, ImportedRepo, NewGist, NewOrg, Options, List
                BEHAVIOR: createNewRepo, createImportedRepo, newGist, newOrg
    d. Branches
    e. MenuOption:      DATA: Profile, AccessHelp, SignOut, AccessSettings

    f. Files:   DATA: Name, Size
                BEHAVIOR: createFile, uploadFile, findFile, AddFilters

    g. UserObject:  
                DATA: Options, Profile, AccessHelp, SignOut, AccessSettings

    h. Contributors:    DATA: List

Instances:

    Branches branches
    UserObject userobject
    Repositories repositories, repositories2
    MenuOption menuoption
    Files file
    Contributors contributors
    FollowerActions followeractions
    Owner owner
    Github github
    
    Sequence:
    
    github.obtainLoginDetails -> Username, Password : IsLoggedIn
    IF IsLoggedIn is TRUE
        LOOP
            owner.Username = Username
            owner.Password = Password
            github.sendUserOptions -> owner.Username: userObject
            repositories.Options = userObject.Options
            menuOption.Profile = userObject.Profile 
            menuOption.AccessHelp = userObject.AccessHelp 
            menuOption.SignOut = userObject.SignOut 
            menuOption.AccessSettings = userObject.AccessSettings
            github.obtainChoice -> repositories.Options, menuOption.Profile, menuOption.AccessHelp, menuOption.SignOut, menuOption.AccessSettings:Choice
    
            CASE of Choice: 
    
                CASE "NEW REPOSITORY" : 
                    github.createNewRepo -> Name, Description, PublicOrPrivate, IsWithREADME : NewRepo
                    repositories = NewRepo
                    START1
                        github.sendToDataBase -> respositories,owner.Username : Confirmation
                        IF Confirmation
                            SUCCESSFUL COMMIT
                            Break
                        ELSE
                            START1
                        ENDIF
                CASE "IMPORT REPOSITORY" :
                    github.importRepo -> cloneURL, Name : ClonedRepo
                    repositories = ClonedRepo
                    START2
                        github.sendToDataBase -> respositories,owner.Username : Confirmation
                        IF Confirmation
                            SUCCESSFUL COMMIT
                            Break
                        ELSE
                            START2
                        ENDIF
                CASE "NEW GIST" :
                    github.newGist -> Description, FileName : NewGist
                    repositories = NewGist
                    START3
                        github.sendToDataBase -> respositories,owner.Username : Confirmation
                        IF Confirmation
                            SUCCESSFUL COMMIT
                            Break
                        ELSE
                            START3
                        ENDIF
                CASE "PROFILE" :
                    github.displayStats -> owner.UserName:owner
                    github.obtainProfileAction-> owner.Repositories, owner.Followers, owner.Following, owner.Stars, owner.Contributions : InternalChoice
    
                    CASE OF InternalChoice:
    
                        CASE "REPOSITORIES":
                              github.displayRepos -> owner.username:repositories.List
                              IF repositories.List is EMPTY
                                 No Repository! Message 
                              ELSE
                                 github.obtainActionRepos -> repositories.List : RequiredRepo
                                 repositories2 = RequiredRepo
                             github.displayActionRepository -> repositories2 : file
                             github.obtainActionOnFiles -> file.createFile, file.uploadFile, file.findFile:Choice

                             CASE OF Choice:

                                CASE "CREATEFILE": 
                                        START 4:
                                        github.sendToDataBase -> file.Name, owner.UserName: Confirmation
                                        IF Confirmation
                                            SUCCESSFUL COMMIT
                                            Break
                                        ELSE
                                            DO YOU WANT TO TRY AGAIN?
                                            IF "YES"
                                                START4
                                        ENDIF
                                CASE "FINDFILE":
                                        github.findFile -> file.AddFilters : file
                                        IF file is EMPTY
                                            No File Found!
                                        ELSE
                                            github.displayFile -> file
                                        ENDIF
                                CASE "UPLOADFILE":
                                        START5:
                                        github.uploadedFileToDataBase -> file.Name, file.Size, commit, owner.UserName: Confirmation
                                        IF Confirmation
                                            SUCCESSFUL COMMIT
                                            Break
                                        ELSE
                                            DO YOU WANT TO TRY AGAIN?
                                            IF "YES"
                                                START5
                                        ENDIF
                                CASE "PULLREQUEST":
                                        START6:
                                        github.createPullRequest -> repositories2.branches, changes, commit : Confirmation 
                                        IF Confirmation
                                            SUCCESSFUL COMMIT
                                            Break
                                        ELSE

                                            START6
                                        ENDIF
                                CASE "BRANCHES":
                                        github.createBranch -> branch, commit : Confirmation
                                        IF Confirmation
                                            SUCCESSFUL COMMIT
                                            Break
                                        ELSE
                                            START6
                                        ENDIF
                                END CASE:
                            ENDIF
                    END CASE        
                    CASE "FOLLOWERS":
                          github.followers -> owner.userName:followers.List
                          IF followers.List IS EMPTY
                             NO FOLLOWERS! Message
                    CASE "FOLLOWING":
                            github.following -> owner.userName:following.List
                          IF following.List IS EMPTY
                             NO FOLLOWING! Message
                    CASE "STARS":
                            github.stars -> owner.userName:stars.list
                          IF stars.List IS EMPTY
                             NO STARS! Message
                    CASE "CONTRIBUTIONS":
                            github.contributions -> owner.userName:contributions.List
                          IF contributions.List IS EMPTY
                             NO CONTRIBUTIONS! Message
                END CASE
            END CASE
        END LOOP
    ENDIF                       
                    

5.Scenario: CodeSharing Platform

Objects:

    a. Item:
            DATA:  Code, Quantity, Amount
    b. VendingMachine:
            DATA:     State
            BEHAVIOR: obtainUserInput, obtainItemCode, sendRestockMessage, 
                      isAmountExact, popAmountToUser, pushChangetoUser, 
                      pushItemFromQueue
    c. UserEntry:
            DATA:  ItemCode,Amount
    d. Amount:
            DATA:  Value
    e. Inventory:
            DATA:  Item[] item
            BEHAVIOR: ItemDetails


Instances:

        VendingMachine vm
        Item selecteditem
        Inventory inventory
        UserEntry userentry
        Amount balance,change

Sequence:

    vm.obtainUserInput -> userInput
    
    vm.State = "ENTER ITEM CODE"
    
    START:
    
    CASE OF vm.State
    
    CASE "ENTER ITEM CODE":
        
        vm.obtainItemCode -> ItemCode :  userentry.ItemCode
        
        IF userentry.ItemCode IS EQUAL TO ERROR_USER_PRESSED_RESET
            vm.State = "RESET"
            break
        ENDIF
    
        inventory.ItemDetails -> userentry.ItemCode : selecteditem 
    
        IF selecteditem is NULL
            Please enter Valid Code message
            
        ELSE IF selecteditem.Quantity is EQUAL to 0
            Item Unavailable, Please choose another item message
            vm.sendRestockMessage -> selecteditem.Code, Quantity,admin.email
        ELSE
            vm.State = "ENTER AMOUNT"
            
        ENDIF
        
    
    CASE "ENTER AMOUNT":
        vm.obtainUserAmount -> Amount : userentry.Amount 
        
        IF userentry.Amount==ERROR_USER_PRESSED_RESET:
            vm.State = "RESET"
            break
         ENDIF      
        
        vm.isAmountExact -> userentry.Amount, selecteditem.Amount : Balance
        vm.ChangeToProvide =  Balance
        vm.State = "DISPATCH"
    
    CASE "RESET":
        userentry.ItemCode = null 
        IF userentry.amount IS NOT NULL
            vm.popAmountToUser -> userentry.amount
        ENDIF
        vm.State = "ENTER ITEM CODE"
    
    CASE "DISPATCH":
            IF vm.ChangeToProvide is NOT NULL
                vm.pushChangetoUser -> vm.ChangeToProvide : Change 
            ENDIF
            vm.pushItemFromQueue -> userentry.ItemCode : Item
    ENDCASE
    
    GOTO start
    